## ###################################################################
##
##     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
##
##     Filename  : ProcessorExpert.lcf
##
##     Project   : ProcessorExpert
##
##     Processor : MCF52259CAG80
##
##     Compiler  : CodeWarrior MCF C Compiler
##
##     Date/Time : 9/17/2012, 9:16 PM
##
##     Abstract  :
##
##     This file is used by the linker. It describes files to be linked,
##     memory ranges, stack size, etc. For detailed description about linker
##     command files see CodeWarrior documentation. This file is generated by default.
##     You can switch off generation by setting the property "Generate linker file = no"
##     in the "Build options" tab of the CPU bean and then modify this file as needed.
##
##     Copyright : 1997 - 2010 Freescale Semiconductor, Inc. All Rights Reserved.
##     
##     http      : www.freescale.com
##     mail      : support@freescale.com
##
## ###################################################################

KEEP_SECTION { .vectortable }

MEMORY {
  interrupts  (RX) : ORIGIN = 0x20000000, LENGTH = 0x00000600
  code        (RX) : ORIGIN = 0x20000600, LENGTH = 0x0000A600
  data        (RW) : ORIGIN = 0x2000AC00, LENGTH = 0x00005400
  ipsbar      (RW) : ORIGIN = 0x40000000, LENGTH = 0x0
}

SECTIONS {
  # Heap and Stack sizes definition
  ___heap_size = 0x0400;
  ___stack_size = 0x0400;

  .ipsbar   : {} > ipsbar

  .interrupts :
  {
    ___VECTOR_RAM = .;
    * (.vectortable)
    . = ALIGN (0x4);
  } > interrupts

  .text :
  {
    * (.text)
    . = ALIGN(0x4);
    * (.rodata)
    . = ALIGN(0x4);
    ___ROM_AT = .;
    ___DATA_ROM = .;
  } > code

  .data : AT(___ROM_AT)
  {
    ___DATA_RAM = .;
    * (.exception)
    . = ALIGN(0x4);
    __exception_table_start__ = .;
    EXCEPTION
    __exception_table_end__   = .;

    ___sinit__ = .;
      STATICINIT

    ___DATA_START =.;
    * (.data)
    . = ALIGN (0x4);
    ___DATA_END   =.;

    __SDATA_START =.;
    * (.sdata)
    . = ALIGN (0x4);
    __SDATA_END = .;

    __SDA_BASE = .;
    . = ALIGN(0x4);
  } > data

  .bss :
  {
    __START_SBSS = .;
    * (.sbss)
    *(SCOMMON)
    __END_SBSS = .;

    __START_BSS = .;
    * (.bss)
    * (COMMON)
    __END_BSS = .;
    . = ALIGN(0x4);
  } >> data

  # 64 Kbytes Internal SRAM
  ___RAMBAR = 0x20000000;
  ___RAMBAR_SIZE = 0x00010000;

  # 512 KByte Internal Flash Memory
  ___FLASH_ADDRESS = 0x00000000;
  ___FLASH_SIZE = 0x00080000;

  ___IPSBAR = ADDR(.ipsbar);

  ___SP_AFTER_RESET = ___RAMBAR + ___RAMBAR_SIZE - 4;
  ___HEAP_START = .;
  ___HEAP_END = ___HEAP_START + ___heap_size;
  ___SP_END = ___HEAP_END;
  ___SP_INIT = ___SP_END + ___stack_size;

  ___heap_addr = ___HEAP_START;
  ___heap_size = ___HEAP_END -  ___HEAP_START;
  __SP_INIT = ___SP_INIT;

  _romp_at = ___ROM_AT + SIZEOF(.data);
  .romp : AT(_romp_at)
  {
    __S_romp = _romp_at;
    WRITEW(___ROM_AT);
    WRITEW(ADDR(.data));
    WRITEW(SIZEOF(.data));
    WRITEW(0);
    WRITEW(0);
    WRITEW(0);
  }
}
